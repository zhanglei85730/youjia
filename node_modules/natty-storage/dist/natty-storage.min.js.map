{"version":3,"file":"natty-storage.min.js","sources":["../src/natty-storage.js","../src/util.js"],"sourcesContent":["import {extend, isPlainObject, noop, hasWindow, hasConsole} from './util'\n\nconst NULL = null\nconst EMPTY = ''\nconst TRUE = true\nconst FALSE = !TRUE\nconst UNDEFINED = undefined\nconst supportStorage = isSupportStorage()\n\n// 全局默认配置\nlet defaultGlobalConfig = {\n    // localStorage, sessionStorage, variable\n    type: 'variable',\n\n    // 存到浏览器缓存中使用的键\n    key: EMPTY,\n\n    // 版本号\n    tag: EMPTY,\n\n    // 有效期长, 单位ms\n    duration: 0,\n\n    // 有效期至, 时间戳\n    until: 0\n}\n\nclass Storage {\n    constructor(options = {}) {\n\n        this.config = extend({}, defaultGlobalConfig, options)\n\n        // 必须配置`key`!!! 无论什么类型!!!\n        if (!this.config.key) {\n            throw new Error('`key` is required when creating a storage!')\n        }\n\n        this._storage = (this.config.type !== 'variable' && supportStorage) ?\n            createStorage(this.config.type) : createVariable()\n\n        this._CHECK_KEY = 'NSCheck:' + this.config.key\n        this._DATA_KEY = 'NSData:' + this.config.key\n\n        // 每个`storage`实例对象都是全新的, 只有`storage`实例的数据才可能是缓存的.\n        this._createStamp = +new Date()\n\n        // 数据备份\n        // 每次set新值之前，先备份当前数据，如果set过程中失败了，则恢复该备份数据\n        this._backupData = {}\n\n        // 用于有效性验证的数据\n        this._checkData = this._storage.get(this._CHECK_KEY)\n\n        // 当前`key`的`storage`是否已经存在\n        this._isNew = this._checkData === NULL\n    }\n\n    // 惰性初始化 在首次调用`set、get、remove`方法时才执行一次 且只执行一次\n    // @private\n    // @note 为什么要做惰性初始化, 因为当数据大时，可以把读取数据的时间推迟\n    // 到第一次调用`set、get、remove`方法时, 从而可以非常快的创建`storage`实例\n    _lazyInit() {\n\n        // 没有对应的本地缓存 或 本地缓存已过期 则 创建新的`storage`实例\n        if (this._isNew || this.isOutdated()) {\n            // 新的数据内容\n            this._storage.set(this._DATA_KEY, this._data = {})\n        }\n\n        // 如果有对应的本地缓存，则将数据添加到`this._data`上\n        else {\n            this._data = this._storage.get(this._DATA_KEY)\n            if (this._data === NULL) {\n                this._storage.set(this._DATA_KEY, this._data = {})\n            }\n        }\n\n        // 更新验证条件，用于下次检查有效性\n        // 只有真正调用了实例方法，才会更新验证数据。\n        // 这样可以在`nattyStorage.clean`方法中，将那些仅实例化但不使用的缓存实例清理掉。\n        this._storage.set(this._CHECK_KEY, this._checkData = {\n            key: this.config.key,\n            tag: this.config.tag,\n            lastUpdate: this._createStamp,\n            duration: this.config.duration,\n            until: this.config.until\n        })\n    }\n\n    // 判断当前`key`的`storage`是否已经过期\n    // @returns {boolean}\n    isOutdated() {\n\n        if (this.config.tag && this.config.tag !== this._checkData.tag) {\n            return TRUE\n        }\n\n        const now = +new Date()\n        // 注意要使用`_checkData`的`duration`验证, 而不是用`config`的`duration`验证!!\n        if (this._checkData.duration && now - this._checkData.lastUpdate > this._checkData.duration) {\n            return TRUE\n        }\n\n        if (this._checkData.until && now > this._checkData.until) {\n            return TRUE\n        }\n\n        return FALSE\n    }\n\n    // 同步设置数据\n    // @param path {Any} optional 要设置的值的路径 或 要设置的完整值\n    // @param value {Any} 要设置的值\n    set(path, data) {\n        if (!this._data) {\n            this._lazyInit()\n        }\n\n        // step1: 备份数据\n        this._backupData = this._data\n\n\n        try {\n            // step2: 更新`this._data`\n            // 注意 `setValueByPath`方法是有抛错场景的 比如给字符串值又添加了新的属性\n            setValueByPath(path, data, this._data)\n\n            // step3: 将`this._data`存储到`storage`中\n            this._storage.set(this._DATA_KEY, this._data)\n        } catch (e) {\n            // 如果存储失败了，恢复原有数据\n            // 保持`this._data`和`storage`中的值同步，是最基本的功能\n            this._storage.set(this._DATA_KEY, this._data = this._backupData)\n\n            throw new Error(e)\n        }\n    }\n\n    // 获取指定的路径的数据\n    // @param path {String} optional 要获取的值的路径 如果不传 则返回整体值\n    // @returns {Any}\n    // instance.get()\n    // instance.get('foo')\n    // instance.get('foo.bar')\n    get(path, fallbackValue) {\n        if (!this._data) {\n            this._lazyInit()\n        }\n\n        let data\n\n        try {\n            if (path) {\n                data = getValueByPath(path, this._data)\n            } else {\n                data = this._data\n            }\n        } catch (e) {\n            throw new Error(e)\n        }\n\n        return data !== UNDEFINED ? data : fallbackValue\n    }\n\n    // 返回指定的路径是否有值\n    // @param path {String} optional 要查询的路径\n    has(path) {\n        if (!this._data) {\n            this._lazyInit()\n        }\n\n        if (!path) {\n            throw new Error('a `key|path` argument should be passed into the `has` method')\n        }\n\n        return hasValueByPath(path, this._data) ? {\n            has: TRUE,\n            value: getValueByPath(path, this._data)\n        }: {\n            has: FALSE,\n            value: UNDEFINED\n        }\n    }\n\n    // 删除指定的路径的数据, 包括键本身\n    // @param path {String} optional 要获取的值的路径 如果不传 则返回整体值\n    remove(path) {\n        if (!this._data) {\n            this._lazyInit()\n        }\n\n        // step1: 备份数据\n        this._backupData = this._data\n\n        // step2: 更新`this._data`\n        if (path) {\n            // 如果有`path` 删除对应的键值对\n            removeKeyAndValueByPath(path, this._data)\n        } else {\n            // 删除所有数据, 即复原到初始空对象\n            this._data = {}\n        }\n\n        // step3: 将`this._data`存储到`storage`中\n        try {\n            this._storage.set(this._DATA_KEY, this._data)\n        } catch (e) {\n            // 如果存储失败了，恢复原有数据\n            // 保持`this._data`和`storage`中的值同步，是最基本的功能\n            this._storage.set(this._DATA_KEY, this._data = this._backupData)\n            throw new Error(e)\n        }\n    }\n\n    // 销毁当前`storage`实例\n    destroy() {\n        this._data = NULL\n        this._checkData = NULL\n        this._storage.remove(this._DATA_KEY)\n        this._storage.remove(this._CHECK_KEY)\n        for (let prop in this.constructor.prototype) {\n            if (this.constructor.prototype.hasOwnProperty(prop)) {\n                this[prop] = UNDEFINED\n            }\n        }\n    }\n\n    dump() {\n        if (!this._data) {\n            this._lazyInit()\n        }\n\n        if (JSON && hasConsole) {\n            console.log(JSON.stringify(this._data, NULL, 4))\n        }\n    }\n}\n\n// 添加异步方法：asyncSet asyncGet asyncHas asyncRemove asyncDestroy\nconst methodHasAsyncMode = ['set', 'get', 'has', 'remove', 'destroy']\nfor (let i=0, l=methodHasAsyncMode.length; i<l; i++) {\n    let method = methodHasAsyncMode[i]\n    Storage.prototype['async' + method.charAt(0).toUpperCase() + method.substr(1)] = function () {\n        return new Promise((resolve, reject) => {\n            try {\n                resolve(this[method].apply(this, arguments))\n            } catch(e) {\n                reject(e)\n            }\n        })\n    }\n}\n\nfunction createStorage(storage) {\n    //  不用担心这个window, 这个函数能调用, 说明已经是在浏览器端了\n    storage = window[storage]\n    // storage = storage === 'localStorage' ? localStorage : sessionStorage\n    return {\n        // NOTE  值为undefined的情况, JSON.stringify方法会将键删除\n        // JSON.stringify({x:undefined}) === \"{}\"\n        set: function (key, value) {\n            storage.setItem(key, JSON.stringify(value))\n        },\n        get: function (key) {\n            let value = storage.getItem(key)\n            // alert(localStorage[key])\n            if (!value) return NULL\n            try {\n                value = JSON.parse(value)\n            } catch (e) {\n            }\n            return value\n        },\n        remove: function (key) {\n            storage.removeItem(key)\n        }\n    }\n}\n\nlet variable = {}\nfunction createVariable() {\n    let storage = variable\n    return {\n        set: function (key, value) {\n            storage[key] = value\n        },\n        get: function (key) {\n            // 当对应的键不存在时, 返回值保持和`storage`一致。\n            if (!(key in storage)) {\n                return NULL\n            }\n            return storage[key]\n        },\n        remove: function (key) {\n            delete storage[key]\n        }\n    }\n}\n\nfunction reserveString (str) {\n    return str.split(EMPTY).reverse().join(EMPTY)\n}\n\nfunction splitPathToKeys (path) {\n    var ret\n    if (path.indexOf('\\\\.') === -1) {\n        ret = path.split('.')\n    } else {\n        ret = reserveString(path).split(/\\.(?!\\\\)/).reverse()\n        for (var i=0, l=ret.length; i<l; i++) {\n            ret[i] = reserveString(ret[i].replace(/\\.\\\\/g, '.'))\n        }\n    }\n    return ret\n}\n\n// 注意 该方法是有抛错场景的\nfunction setValueByPath(path, value, data) {\n    let keys = splitPathToKeys(path)\n    let bottomData = data\n    while (keys.length) {\n        let key = keys.shift()\n        if (keys.length) {\n            bottomData[key] = bottomData[key] || {}\n            bottomData = bottomData[key]\n        } else {\n            if (isPlainObject(bottomData)) {\n                bottomData[key] = value\n            } else {\n                throw new Error('Cannot create property `'+key+'` on non-object value, path:`'+path+'`')\n            }\n        }\n    }\n    return data\n}\n\nfunction getValueByPath(path, data, isKey) {\n    isKey = isKey || false\n    if (isKey === true || path.indexOf('.') === -1) {\n        return data[path]\n    } else {\n        let keys = splitPathToKeys(path)\n\n        while(keys.length) {\n            let key = keys.shift()\n            data = getValueByPath(key, data, true)\n\n            if (typeof data !== 'object' || data === UNDEFINED) {\n                if (keys.length) data = UNDEFINED\n                break\n            }\n        }\n        return data\n    }\n}\n\nfunction hasValueByPath(path, data, isKey) {\n    // 首次调用, 如果没有`.`, 就是key的含义\n    isKey = isKey || path.indexOf('.') === -1\n    if (isKey) {\n        return data.hasOwnProperty(path)\n    } else {\n        let keys = splitPathToKeys(path)\n        while(keys.length) {\n            let key = keys.shift()\n            let hasKey = data.hasOwnProperty(key)\n            if (hasKey && keys.length) {\n                data = getValueByPath(key, data, true)\n                if (!isPlainObject(data)) {\n                    return FALSE\n                }\n            } else {\n                return hasKey\n            }\n        }\n    }\n}\n\nfunction removeKeyAndValueByPath(path, data) {\n    let keys = splitPathToKeys(path)\n    let bottomData = data\n    while (keys.length) {\n        let key = keys.shift()\n        if (keys.length) {\n            bottomData[key] = bottomData[key] || {}\n            bottomData = bottomData[key]\n        } else {\n            delete bottomData[key]\n        }\n    }\n    return data\n}\n\nfunction isSupportStorage() {\n    if (!hasWindow) {\n        return FALSE\n    }\n\n    if (typeof localStorage !== 'object') {\n        return FALSE\n    }\n\n    // 执行到这里，说明存在`storage`对象, 但, 有了也不一定能用!!! 比如隐身模式, 所以需要进一步验证\n    // `Safari`在隐身模式下会触发错误\n    let support = TRUE\n    try {\n        const a = '__nstest__'\n        localStorage.setItem(a, a)\n        support = localStorage.getItem(a) === a\n        localStorage.removeItem(a)\n    } catch (e) {\n        support = FALSE\n    }\n    return support\n}\n\nconst nattyStorage = (options) => {\n    return new Storage(options)\n}\n\nnattyStorage.version = '__VERSION__'\nnattyStorage._variable = variable\nnattyStorage.supportStorage = supportStorage\n\nnattyStorage.each = function (fn = noop) {\n    const map = {\n        variable: nattyStorage._variable\n    }\n\n    if (supportStorage) {\n        map.localStorage = localStorage\n        map.sessionStorage = sessionStorage\n    }\n\n    for (let type in map) {\n        for (let key in map[type]) {\n            if (key.indexOf('NSCheck:') > -1) {\n                let storage = nattyStorage({\n                    key: key.match(/NSCheck:(.*)/)[1],\n                    type: type\n                })\n                fn(storage)\n            }\n        }\n    }\n}\n\n// 清理localStorage中过期的缓存\nnattyStorage.clean = function () {\n    this.each(function (storage) {\n        if (storage.isOutdated()) {\n            storage.destroy()\n        }\n    })\n}\n\nnattyStorage.list = function () {\n    this.each(function (storage) {\n        hasConsole && console.log(storage.config.type, storage.config.key, storage.get())\n    })\n}\n\n// 内置处理一次过期数据\nnattyStorage.clean()\n\nexport default nattyStorage","\nexport const hasWindow = 'undefined' !== typeof window;\nexport const hasConsole = 'undefined' !== typeof console;\nconst NULL = null\n\n/**\n * 变换两个参数的函数到多个参数\n * @param  {Function} fn 基函数\n * @return {Function} 变换后的函数\n * @demo\n *      function add(x, y) { return x+y; }\n *      add = redo(add);\n *      add(1,2,3) => 6\n */\nconst redo = fn => {\n\treturn function() {\n\t\tconst args = arguments\n\t\tlet ret = fn(args[0], args[1])\n\t\tfor (let i = 2, l = args.length; i < l; i++) {\n\t\t\tret = fn(ret, args[i])\n\t\t}\n\t\treturn ret\n\t}\n};\n\nconst OBJECT = 'object'\nconst isObject = v => {\n\treturn typeof v === OBJECT && v !== NULL\n}\n\nconst isWindow = v => {\n\treturn v !== NULL && v === v.window\n}\n\n// 参考了zepto\nexport const isPlainObject = v => {\n\treturn v !== NULL && isObject(v) && !isWindow(v) && Object.getPrototypeOf(v) === Object.prototype\n}\n\nconst ARRAY_TYPE = '[object Array]'\nexport const isArray = Array.isArray || (v => Object.prototype.toString.call(v) === ARRAY_TYPE)\n\n/**\n * 对象扩展\n * @param  {Object} receiver\n * @param  {Object} supplier\n * @return {Object} 扩展后的receiver对象\n * @note 这个extend方法是定制的, 不要拷贝到其他地方用!!!\n */\nlet _extend = (receiver = {}, supplier = {}) => {\n    for (let key in supplier) {\n        // `supplier`中不是未定义的键 都可以执行扩展\n        if (supplier.hasOwnProperty(key) && supplier[key] !== undefined) {\n            if (isArray(supplier[key])) {\n                receiver[key] = [].concat(supplier[key]);\n            } else if (isPlainObject(supplier[key])) {\n                receiver[key] = _extend({}, supplier[key]);\n            } else {\n                receiver[key] = supplier[key];\n            }\n        }\n    }\n    return receiver;\n};\n\nexport const extend = redo(_extend)\n\nexport const noop = function () {}\n"],"names":["createStorage","storage","window","set","key","value","setItem","JSON","stringify","get","let","getItem","NULL","parse","e","remove","removeItem","createVariable","variable","reserveString","str","split","EMPTY","reverse","join","splitPathToKeys","path","ret","indexOf","i","l","length","replace","setValueByPath","data","keys","bottomData","shift","isPlainObject","Error","getValueByPath","isKey","UNDEFINED","hasValueByPath","hasOwnProperty","hasKey","FALSE","removeKeyAndValueByPath","const","hasWindow","hasConsole","console","isObject","v","isWindow","Object","getPrototypeOf","prototype","isArray","Array","toString","call","_extend","receiver","supplier","undefined","concat","extend","fn","args","arguments","noop","TRUE","supportStorage","localStorage","support","a","defaultGlobalConfig","type","tag","duration","until","Storage","options","this","config","_storage","_CHECK_KEY","_DATA_KEY","_createStamp","Date","_backupData","_checkData","_isNew","_lazyInit","isOutdated","_data","lastUpdate","now","fallbackValue","has","destroy","prop","constructor","this$1","dump","log","methodHasAsyncMode","method","charAt","toUpperCase","substr","Promise","resolve","reject","apply","nattyStorage","version","_variable","each","map","sessionStorage","match","clean","list"],"mappings":"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"}