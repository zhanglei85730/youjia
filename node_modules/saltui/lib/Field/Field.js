'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _NoteRound = require('salt-icon/lib/NoteRound');

var _NoteRound2 = _interopRequireDefault(_NoteRound);

var _classnames5 = require('classnames');

var _classnames6 = _interopRequireDefault(_classnames5);

var _Symbol = require('salt-icon/dist/Symbol');

var _Symbol2 = _interopRequireDefault(_Symbol);

var _Context = require('../Context');

var _Label = require('./Label');

var _Label2 = _interopRequireDefault(_Label);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Field Component for tingle
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author gnosaij
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2014-2016, Tingle Team.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var Field = function (_React$Component) {
  _inherits(Field, _React$Component);

  function Field() {
    _classCallCheck(this, Field);

    return _possibleConstructorReturn(this, (Field.__proto__ || Object.getPrototypeOf(Field)).apply(this, arguments));
  }

  _createClass(Field, [{
    key: 'renderErrMsg',
    value: function renderErrMsg() {
      var _this2 = this;

      if (!this.props.errMsg || this.props.readOnly || this.props.disabled) return null;
      var Toast = this.props.toastComponent;
      return _react2.default.createElement(_NoteRound2.default, {
        className: (0, _Context.prefixClass)('field-error-icon'),
        onClick: function onClick(e) {
          if (Toast) {
            e.stopPropagation();
            Toast.show({
              content: _this2.props.errMsg
            });
          }
        }
      });
    }
  }, {
    key: 'renderIcon',
    value: function renderIcon() {
      var t = this;
      if (t.props.icon) {
        var icon = null;
        if (typeof t.props.icon.type === 'function') {
          icon = t.props.icon;
        } else if (t.props.icon.name) {
          icon = _react2.default.createElement(_Symbol2.default, t.props.icon);
        }
        if (icon) {
          return icon;
        }
      }
      return null;
    }
  }, {
    key: 'renderTip',
    value: function renderTip() {
      var t = this;
      var _t$props = t.props,
          readOnly = _t$props.readOnly,
          disabled = _t$props.disabled,
          tip = _t$props.tip,
          errMsg = _t$props.errMsg,
          showErrInTip = _t$props.showErrInTip,
          layout = _t$props.layout;

      if (!readOnly && !disabled && (tip || errMsg && showErrInTip)) {
        var message = errMsg || tip;
        var hasError = errMsg && showErrInTip;
        return _react2.default.createElement(
          'div',
          { className: (0, _classnames6.default)((0, _Context.prefixClass)('field-box FBH field-tip-box'), _defineProperty({}, (0, _Context.prefixClass)('field-tip-box-error'), hasError))
          },
          layout === 'h' ? t.renderLabel({ className: (0, _Context.prefixClass)('field-tip-placeholder') }) : null,
          _react2.default.createElement(
            'div',
            { className: (0, _Context.prefixClass)('FBH FBAC LH1_5 field-tip') },
            message
          )
        );
      }
      return null;
    }
  }, {
    key: 'renderLabelRight',
    value: function renderLabelRight() {
      return this.props.labelRight;
    }
  }, {
    key: 'renderLabel',
    value: function renderLabel() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var t = this;
      if (t.props.label || t.props.labelRight) {
        return _react2.default.createElement(_Label2.default, _extends({
          label: t.props.label,
          required: t.props.required,
          layout: t.props.layout,
          right: t.props.layout === 'v' ? this.renderLabelRight() : null
        }, options));
      }
      return null;
    }
  }, {
    key: 'renderContent',
    value: function renderContent() {
      var _classnames2;

      var t = this;
      var _t$props2 = t.props,
          children = _t$props2.children,
          extra = _t$props2.extra,
          icon = _t$props2.icon,
          errMsg = _t$props2.errMsg,
          layout = _t$props2.layout,
          tappable = _t$props2.tappable,
          multiLine = _t$props2.multiLine,
          showErrInTip = _t$props2.showErrInTip,
          disabled = _t$props2.disabled;

      if (layout === 'v' && !children && !extra && !icon && !errMsg) {
        return null;
      }
      return _react2.default.createElement(
        'div',
        {
          className: (0, _classnames6.default)((0, _Context.prefixClass)('field-box field-content-box FBH'), (_classnames2 = {}, _defineProperty(_classnames2, (0, _Context.prefixClass)('TE'), tappable), _defineProperty(_classnames2, (0, _Context.prefixClass)('FBAC'), !multiLine), _classnames2))
        },
        layout === 'h' ? t.renderLabel() : null,
        _react2.default.createElement(
          'div',
          {
            className: (0, _classnames6.default)((0, _Context.prefixClass)('FB1 PR'), _defineProperty({}, (0, _Context.prefixClass)('field-multi'), multiLine))
          },
          children
        ),
        extra,
        icon || errMsg && !showErrInTip ? _react2.default.createElement(
          'div',
          { className: (0, _Context.prefixClass)('FBH FBAC field-icon') },
          this.renderErrMsg(),
          this.renderIcon()
        ) : null
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _classnames4;

      var t = this;
      return _react2.default.createElement(
        'div',
        {
          className: (0, _classnames6.default)((0, _Context.prefixClass)('field'), (_classnames4 = {}, _defineProperty(_classnames4, (0, _Context.prefixClass)('field-disabled'), t.props.disabled), _defineProperty(_classnames4, t.props.className, !!t.props.className), _classnames4))
        },
        t.props.layout === 'v' ? t.renderLabel() : null,
        this.renderContent(),
        this.renderTip()
      );
    }
  }]);

  return Field;
}(_react2.default.Component);

Field.defaultProps = {
  label: '',
  tappable: false,
  required: false,
  readOnly: false,
  disabled: false,
  multiLine: false,
  layout: 'h',
  tip: '',
  icon: undefined,
  extra: undefined,
  toastComponent: undefined,
  errMsg: undefined,
  showErrInTip: true
};

// http://facebook.github.io/react/docs/reusable-components.html
Field.propTypes = {
  label: _propTypes2.default.string,
  icon: _propTypes2.default.object,
  required: _propTypes2.default.bool,
  tappable: _propTypes2.default.bool,
  readOnly: _propTypes2.default.bool,
  disabled: _propTypes2.default.bool,
  multiLine: _propTypes2.default.bool,
  layout: _propTypes2.default.oneOf(['h', 'v']),
  tip: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.element]),
  extra: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.element]),
  toastComponent: _propTypes2.default.func,
  errMsg: _propTypes2.default.string,
  showErrInTip: _propTypes2.default.bool
};

Field.getFieldProps = function () {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var fieldProps = {};
  Object.keys(props).forEach(function (key) {
    if (key in Field.propTypes) {
      fieldProps[key] = props[key];
    }
  });
  return fieldProps;
};

Field.displayName = 'Field';

exports.default = Field;
module.exports = exports['default'];