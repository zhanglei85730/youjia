'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

var _CrossRound = require('salt-icon/lib/CrossRound');

var _CrossRound2 = _interopRequireDefault(_CrossRound);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Context = require('../Context');

var _Context2 = _interopRequireDefault(_Context);

var _Field = require('../Field');

var _Field2 = _interopRequireDefault(_Field);

var _FoldablePane = require('../FoldablePane');

var _FoldablePane2 = _interopRequireDefault(_FoldablePane);

var _Dialog = require('../Dialog');

var _Dialog2 = _interopRequireDefault(_Dialog);

var _Item = require('./Item');

var _Item2 = _interopRequireDefault(_Item);

var _i18n = require('./i18n');

var _i18n2 = _interopRequireDefault(_i18n);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
// import PlusCircle from 'salt-icon/lib/PlusCircle';


var TagField = function (_React$Component) {
  _inherits(TagField, _React$Component);

  function TagField(props) {
    _classCallCheck(this, TagField);

    var _this = _possibleConstructorReturn(this, (TagField.__proto__ || Object.getPrototypeOf(TagField)).call(this, props));

    _this.handleAdd = function () {
      _this.setState({
        dialogShow: true,
        inputValue: '',
        hasError: false
      });
    };

    _this.handleEdit = function () {
      _this.setState({
        canEdit: true
      });
    };

    _this.handleDialogConfirm = function () {
      var tags = _this.getTags();
      var hasError = tags.indexOf(_this.state.inputValue) !== -1;
      if (hasError) {
        _this.setState({
          hasError: hasError
        });
      } else {
        _this.props.onAdd(_this.state.inputValue);
        _this.props.onChange([_this.state.inputValue].concat(tags));
        _this.setState({
          dialogShow: false
        });
      }
    };

    _this.handleDialogCancel = function () {
      _this.setState({
        dialogShow: false
      });
    };

    _this.state = {
      dialogShow: false,
      inputValue: '',
      hasError: false,
      canEdit: false
    };
    return _this;
  }

  _createClass(TagField, [{
    key: 'getTags',
    value: function getTags() {
      return _react2.default.Children.map(this.props.children, function (child) {
        return child.props.tag;
      });
    }
  }, {
    key: 'handleDelete',
    value: function handleDelete(tag, onDelete) {
      if (typeof onDelete === 'function') {
        onDelete(tag);
      }
      var tags = this.getTags();
      this.props.onChange(tags.filter(function (key) {
        return key !== tag;
      }));
    }
  }, {
    key: 'renderTags',
    value: function renderTags() {
      var _this2 = this;

      var count = _react2.default.Children.count(this.props.children);
      if (count) {
        return _react2.default.createElement(
          _FoldablePane2.default,
          { foldHeight: 168, isFold: true },
          _react2.default.createElement(
            'div',
            { className: _Context2.default.prefixClass('tag-field-tags') },
            _react2.default.Children.map(this.props.children, function (child) {
              return _react2.default.cloneElement(child, {
                canEdit: _this2.state.canEdit,
                onDelete: function onDelete(tag) {
                  _this2.handleDelete(tag, child.props.onDelete);
                }
              });
            })
          )
        );
      }
      return null;
    }
  }, {
    key: 'renderAction',
    value: function renderAction() {
      var _props = this.props,
          readOnly = _props.readOnly,
          locale = _props.locale,
          children = _props.children;

      if (readOnly) return null;
      var childrenCount = _react2.default.Children.count(children);
      return _react2.default.createElement(
        'div',
        { className: _Context2.default.prefixClass('tag-field-actions') },
        childrenCount ? _react2.default.createElement(
          'span',
          {
            className: _Context2.default.prefixClass('tag-field-action'),
            onClick: this.handleEdit
          },
          _i18n2.default[locale].edit
        ) : null,
        _react2.default.createElement(
          'span',
          {
            className: _Context2.default.prefixClass('tag-field-action'),
            onClick: this.handleAdd
          },
          _i18n2.default[locale].add
        )
      );
    }
  }, {
    key: 'renderError',
    value: function renderError() {
      if (this.state.hasError) {
        var locale = this.props.locale;

        return _react2.default.createElement(
          'div',
          { className: _Context2.default.prefixClass('tag-field-dialog-error') },
          _react2.default.createElement(_CrossRound2.default, { width: 16, height: 16, className: _Context2.default.prefixClass('tag-field-dialog-error-icon') }),
          _i18n2.default[locale].errorTip
        );
      }
      return null;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _props2 = this.props,
          className = _props2.className,
          children = _props2.children,
          locale = _props2.locale,
          otherProps = _objectWithoutProperties(_props2, ['className', 'children', 'locale']);

      var fieldProps = {
        className: (0, _classnames3.default)(_Context2.default.prefixClass('tag-field'), _defineProperty({}, className, !!className)),
        labelRight: this.renderAction(),
        layout: 'v'
      };
      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(_Field2.default, _extends({}, otherProps, fieldProps)),
        this.renderTags(),
        _react2.default.createElement(
          _Dialog2.default,
          {
            show: this.state.dialogShow,
            title: _i18n2.default[locale].addTag,
            type: 'confirm',
            onConfirm: this.handleDialogConfirm,
            onCancel: this.handleDialogCancel
          },
          _react2.default.createElement(
            'div',
            { className: _Context2.default.prefixClass('tag-field-dialog-content') },
            _react2.default.createElement('input', {
              value: this.state.inputValue,
              className: _Context2.default.prefixClass('tag-field-dialog-input'),
              placeholder: _i18n2.default[locale].inputPlaceholder,
              onChange: function onChange(e) {
                _this3.setState({ inputValue: e.target.value });
              }
            }),
            this.renderError()
          )
        )
      );
    }
  }]);

  return TagField;
}(_react2.default.Component);

TagField.displayName = 'TagField';
TagField.propTypes = _extends({}, _Field2.default.propTypes, {
  locale: _propTypes2.default.string,
  onAdd: _propTypes2.default.func,
  onChange: _propTypes2.default.func
});
TagField.defaultProps = {
  locale: 'zh-cn',
  onAdd: function onAdd() {},
  onChange: function onChange() {}
};
TagField.Item = _Item2.default;
exports.default = TagField;
module.exports = exports['default'];