'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Icon Component Demo for tingle
 * @author hanyu
 *
 * Copyright 2014-2015, Tingle Team, Alinw.
 * All rights reserved.
 */
var React = require('react');
var Grid = require('@ali/tingle-grid');

var Icon = require('../../src');

var SymbolIcon = require('../../src/Symbol');

var Demo = function (_React$Component) {
  _inherits(Demo, _React$Component);

  function Demo(props) {
    _classCallCheck(this, Demo);

    var _this = _possibleConstructorReturn(this, (Demo.__proto__ || Object.getPrototypeOf(Demo)).call(this, props));

    _this.state = {
      colorIcons: ['cross', 'check', 'map', 'pen', 'photo'],
      icons: ['angle-down', 'angle-left', 'angle-right', 'angle-up', 'direction-bottom', 'direction-left', 'direction-right', 'direction-top', 'check-round', 'cross-round', 'check', 'cross', 'option-checked', 'face-sad-full', 'face-sad-line', 'face-smile-full', 'face-smile-line', 'info-circle', 'info-round', 'note-round', 'warn-line', 'field-required', 'loading', 'loading-round', 'map', 'plus-round', 'minus-round', 'plus-circle', 'minus-circle', 'plus-thin', 'plus', 'minus-thin', 'pen', 'photo', 'search', 'star-full', 'star-line', 'star', 'time', 'setting', 'toast-error', 'toast-fail', 'toast-loading', 'toast-success', 'user', 'totop', 'eye', 'eye-close', 'lock', 'upload']
    };
    return _this;
  }

  _createClass(Demo, [{
    key: 'render',
    value: function render() {
      return React.createElement(
        'div',
        null,
        React.createElement(
          'div',
          { className: 't-P20 t-FAC' },
          React.createElement(Icon, { name: 'star', className: 'logo' })
        ),
        React.createElement(
          'div',
          { className: 't-BCe t-FAC t-LH44' },
          '\u5355\u8272SVG\u56FE\u6807'
        ),
        React.createElement(
          Grid,
          { col: 5, square: true },
          React.Children.toArray(this.state.icons.map(function (icon) {
            return React.createElement(
              'span',
              { className: 't-FBV t-FB1 t-FBJC t-FBAC' },
              React.createElement(Icon, { name: icon, className: 'demoIcon' }),
              React.createElement(
                'p',
                { className: 'icon-name' },
                icon
              )
            );
          }))
        ),
        React.createElement(
          'div',
          { className: 't-BCe t-FAC t-LH44' },
          '\u5355\u8272SVG\u56FE\u6807, \u8BBE\u7F6E\u5C3A\u5BF8\u548C\u989C\u8272'
        ),
        React.createElement(
          Grid,
          { col: 5, square: true },
          React.Children.toArray(this.state.icons.map(function (icon) {
            return React.createElement(
              'span',
              { className: 't-FBV t-FB1 t-FBJC t-FBAC' },
              React.createElement(Icon, { name: icon, className: 'demoIcon2' }),
              React.createElement(
                'p',
                { className: 'icon-name' },
                icon
              )
            );
          })),
          React.createElement(Icon, { name: 'toast-error', fill: '#4d9df0' }),
          React.createElement(Icon, { name: 'toast-fail', fill: '#9462a9' }),
          React.createElement(Icon, { name: 'toast-loading', fill: '#7bc380' }),
          React.createElement(Icon, { name: 'toast-success', fill: '#942a09' }),
          React.createElement(Icon, { name: 'plus-circle', fill: '#e65100' })
        ),
        React.createElement(
          'div',
          { className: 't-BCe t-FAC t-LH44' },
          '\u4F7F\u7528 Symbol'
        ),
        React.createElement(SymbolIcon, { name: 'field-required', fill: '#e65100' })
      );
    }
  }]);

  return Demo;
}(React.Component);

module.exports = Demo;