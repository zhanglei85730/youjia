{"version":3,"file":null,"sources":["../src/util.js","../src/ajax.js","../src/jsonp.js","../src/event.js","../src/request.js","../src/defer.js","../src/plugin.loop.js","../src/plugin.soon.js","../src/default-global-config.js","../src/natty-fetch.js"],"sourcesContent":["export const hasWindow = 'undefined' !== typeof window\nexport const hasConsole = 'undefined' !== typeof console\nexport const doc = hasWindow ? document : null\nexport const escape = encodeURIComponent\nexport const NULL = null\nexport const TRUE = true\nexport const FALSE = !TRUE\nexport const UNDEFINED = 'undefined'\nexport const EMPTY = ''\n\nconst toString = Object.prototype.toString\nconst ARRAY_TYPE = '[object Array]'\nconst OBJECT_TYPE = '[object Object]'\n\n/**\n * 伪造的`promise`对象\n * NOTE 伪造的promise对象要支持链式调用 保证和`new Promise`返回的对象行为一致\n *      dummyPromise.then().catch().finally()\n */\nexport const dummyPromise = {\n    dummy: TRUE\n}\n\ndummyPromise.then = dummyPromise['catch'] = () => {\n    // NOTE 这里用了剪头函数 不能用`return this`\n    return dummyPromise\n}\n\n/**\n * 判断是否是IE8~11, 不包含Edge\n * @returns {boolean}\n * @note IE11下 window.ActiveXObject的值很怪异, 所以需要追加 'ActiveXObject' in window 来判断\n */\nexport const isIE = hasWindow && (!!window.ActiveXObject || 'ActiveXObject' in window)\n\nexport function noop(v) {\n    return v\n}\n\n/**\n * 变换两个参数的函数到多个参数\n * @param  {Function} fn 基函数\n * @return {Function} 变换后的函数\n * @demo\n *      function add(x, y) { return x+y; }\n *      add = redo(add);\n *      add(1,2,3) => 6\n */\nexport function redo(fn) {\n    return function () {\n        var args = arguments\n        var ret = fn(args[0], args[1])\n        for (var i = 2, l = args.length; i < l; i++) {\n            ret = fn(ret, args[i])\n        }\n        return ret\n    }\n}\n\nconst random = Math.random\nconst floor = Math.floor\nexport function makeRandom() {\n    return floor(random() * 9e9)\n}\n\nconst absoluteUrlReg = /^(https?:)?\\/\\//\nexport function isAbsoluteUrl(url) {\n    return !!url.match(absoluteUrlReg)\n}\n\nconst relativeUrlReg = /^[\\.\\/]/\nexport function isRelativeUrl(url) {\n    return !!url.match(relativeUrlReg)\n}\n\nconst BOOLEAN = 'boolean'\nexport function isBoolean(v) {\n    return typeof v === BOOLEAN\n}\n\nconst STRING = 'string'\nexport function isString(v) {\n    return typeof v === STRING\n}\n\nconst FUNCTION = 'function'\nexport function isFunction(v) {\n    return typeof v === FUNCTION\n}\n\nexport function runAsFn(v) {\n    return isFunction(v) ? v() : v\n}\n\nconst NUMBER = 'number'\nexport function isNumber(v) {\n    return !isNaN(v) && typeof v === NUMBER\n}\n\nconst OBJECT = 'object'\nexport function isObject(v) {\n    return typeof v === OBJECT && v !== NULL\n}\n\nexport function isWindow(v) {\n    return v !== NULL && v === v.window\n}\n\n// 参考了zepto\nexport function isPlainObject(v) {\n    return v !== NULL && isObject(v) && !isWindow(v) && Object.getPrototypeOf(v) === Object.prototype\n}\n\nexport function isEmptyObject(v) {\n    let count = 0\n    for (let i in v) {\n        if (v.hasOwnProperty(i)) {\n            count++\n        }\n    }\n    return count === 0\n}\n\nexport function isArray(v) {\n    return toString.call(v) === ARRAY_TYPE\n}\n\n/**\n * 判断是否跨域\n * @type {Element}\n * @note 需要特别关注IE8~11的行为是不一样的!!!\n */\nlet originA\nif(doc) {\n    originA = doc.createElement('a')\n    originA.href = location.href\n}\nexport function isCrossDomain(url) {\n\n    let requestA = doc.createElement('a')\n    requestA.href = url\n\n    // 如果`url`的值不包含`protocol`和`host`(比如相对路径), 在标准浏览器下, 会自定补全`requestA`对象的`protocal`和`host`属性.\n    // 但在IE8~11下, 不会自动补全. 即`requestA.protocol`和`requestA.host`的值都是空的.\n    // 在IE11的不同小版本下, requestA.protocol的值有的是`:`, 有的是空字符串, 太奇葩啦!\n    if (__FALLBACK__) {\n        if (isIE && (requestA.protocol === ':' || requestA.protocol === '')) {\n            if (requestA.hostname === '') {\n                //alert(0)\n                return false\n            } else {\n                //alert('1:'+(originA.hostname !== requestA.hostname || originA.port !== requestA.port))\n                return originA.hostname !== requestA.hostname || originA.port !== requestA.port\n            }\n        }\n    }\n\n    // 标准浏览器\n    return originA.hostname !== requestA.hostname || originA.port !== requestA.port || originA.protocol !== requestA.protocol\n}\n\n/**\n * 对象扩展\n * @param  {Object} receiver\n * @param  {Object} supplier\n * @return {Object} 扩展后的receiver对象\n * @note 这个extend方法是定制的, 不要拷贝到其他地方用!!!\n * @note 这个extend方法是深拷贝方式的!!!\n */\nfunction _extend(receiver = {}, supplier = {}, deepCopy = FALSE) {\n    for (let key in supplier) {\n        // `supplier`中不是未定义的键 都可以执行扩展\n        if (supplier.hasOwnProperty(key) && supplier[key] !== undefined) {\n            if (deepCopy === TRUE) {\n                if (isArray(supplier[key])) {\n                    receiver[key] = [].concat(supplier[key])\n                } else if (isPlainObject(supplier[key])) {\n                    receiver[key] = extend({}, supplier[key])\n                } else {\n                    receiver[key] = supplier[key]\n                }\n            } else {\n                receiver[key] = supplier[key]\n            }\n        }\n    }\n    return receiver\n};\n\nconst extend = redo(_extend)\nexport {extend}\n\nexport function likeArray(v) {\n    if (!v) {\n        return false\n    }\n    return typeof v.length === NUMBER\n}\n\n/**\n *\n * @param v {Array|Object} 遍历目标对象\n * @param fn {Function} 遍历器 会被传入两个参数, 分别是`value`和`key`\n */\nexport function each(v, fn) {\n    let i, l\n    if (likeArray(v)) {\n        for (i = 0, l = v.length; i < l; i++) {\n            if (fn.call(v[i], v[i], i) === false) return\n        }\n    } else {\n        for (i in v) {\n            if (fn.call(v[i], v[i], i) === false) return\n        }\n    }\n}\n\n/**\n * 将对象的`键`排序后 返回一个新对象\n *\n * @param obj {Object} 被操作的对象\n * @returns {Object} 返回的新对象\n * @case 这个函数用于对比两次请求的参数是否一致\n */\nexport function sortPlainObjectKey(obj) {\n    let clone = {}\n    let key\n    let keyArray = []\n    for (key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            keyArray.push(key)\n            if (isPlainObject(obj[key])) {\n                obj[key] = sortPlainObjectKey(obj[key])\n            }\n        }\n    }\n    keyArray.sort()\n    for (let i=0, l=keyArray.length; i<l; i++) {\n        clone[keyArray[i]] = obj[keyArray[i]]\n    }\n    return clone\n}\n\nexport function serialize(params, obj, traditional, scope) {\n    let type, array = isArray(obj), hash = isPlainObject(obj)\n    each(obj, function(value, key) {\n        type = toString.call(value)\n        if (scope) {\n            key = traditional ? scope : scope + '[' + (hash || type == OBJECT_TYPE || type == ARRAY_TYPE ? key : '') + ']'\n        }\n\n        // 递归\n        if (!scope && array) {\n            params.add(value.name, value.value)\n        }\n        // recurse into nested objects\n        else if (type == ARRAY_TYPE || (!traditional && type == OBJECT_TYPE)) {\n            serialize(params, value, traditional, key)\n        } else {\n            params.add(key, value)\n        }\n    })\n}\n\n/**\n * 功能和`Zepto.param`一样\n * @param obj {Object}\n * @param traditional {Boolean}\n * @returns {string}\n * $.param({ foo: { one: 1, two: 2 }}) // \"foo[one]=1&foo[two]=2)\"\n * $.param({ ids: [1,2,3] })           // \"ids[]=1&ids[]=2&ids[]=3\"\n * $.param({ ids: [1,2,3] }, true)     // \"ids=1&ids=2&ids=3\"\n * $.param({ foo: 'bar', nested: { will: 'not be ignored' }})    // \"foo=bar&nested[will]=not+be+ignored\"\n * $.param({ foo: 'bar', nested: { will: 'be ignored' }}, true)  // \"foo=bar&nested=[object+Object]\"\n * $.param({ id: function(){ return 1 + 2 } })  // \"id=3\"\n */\nexport function param(obj, traditional) {\n    var params = []\n    params.add = (key, value) => {\n        if (isFunction(value)) value = value()\n        if (value == NULL) value = ''\n        params.push(escape(key) + '=' + escape(value))\n    }\n    serialize(params, obj, traditional)\n    return params.join('&').replace(/%20/g, '+')\n}\n\nexport function decodeParam(str) {\n    return decodeURIComponent(str.replace(/\\+/g, ' '))\n}\n\n// 给URL追加查询字符串\nexport function appendQueryString(url, obj, urlStamp, traditional) {\n    // 是否添加时间戳\n    if (urlStamp) {\n        obj[isBoolean(urlStamp) ? '_stamp' : urlStamp] = +new Date()\n    }\n    let queryString = param(obj, traditional)\n\n    if (queryString) {\n        return url + (~url.indexOf('?') ? '&' : '?') + queryString\n    } else {\n        return url\n    }\n}","import {\n    extend, appendQueryString, noop, isCrossDomain, isBoolean, param,\n    TRUE, FALSE, NULL, UNDEFINED\n} from './util'\n\nconst supportCORS = UNDEFINED !== typeof XMLHttpRequest && 'withCredentials' in (new XMLHttpRequest())\nconst GET = 'GET'\nconst POST = 'POST'\nconst SCRIPT = 'script'\nconst XML = 'xml'\nconst JS0N = 'json' // NOTE 不能使用`JSON`，这里用数字零`0`代替了字母`O`\n\n// minetype的简写映射\n// TODO 考虑是否优化\nconst acceptToRequestHeader = {\n    // IIS returns `application/x-javascript` 但应该不需要支持\n    '*':    '*/' + '*',\n    script: 'text/javascript, application/javascript, application/ecmascript, application/x-ecmascript',\n    json:   'application/json, text/json',\n    xml:    'application/xml, text/xml',\n    html:   'text/html',\n    text:   'text/plain'\n}\n\n// 设置请求头\n// 没有处理的事情：跨域时使用者传入的多余的Header没有屏蔽 没必要\nconst setHeaders = (xhr, options) => {\n\n    const header = {\n        Accept: acceptToRequestHeader[options.accept]\n    }\n\n    // 如果没有跨域 则打该标识 业界通用做法\n    if (!isCrossDomain(options.url)) {\n        header['X-Requested-With'] = 'XMLHttpRequest'\n    }\n\n    // 如果POST方法，没有明确指定编码方式，默认urlencoded，\n    // TODO v3.x将去掉改处理！！！需要文档强调\n    if (options.method === 'POST' && !header['Content-Type']) {\n        header['Content-Type'] = 'application/x-www-form-urlencoded'\n    }\n\n    extend(header, options.header)\n\n    for (let key in header) {\n        xhr.setRequestHeader(key, header[key])\n    }\n\n    return header\n}\n\n// 绑定事件\n// NOTE 还得继续使用readystatechange事件\n//      比较遗憾 到现在了依然不能安全的使用load和error等事件 就连PC端的chrome都有下面的问题\n//      500: 触发load loadend 不触发error\n//      404: 触发load loadend 不触发error\nconst setEvents = (xhr, options) => {\n\n    // 再高级的浏览器都有低级错误! 已经不能在相信了!\n    // MAC OSX Yosemite Safari上的低级错误: 一次`ajax`请求的`loadend`事件完成之后,\n    // 如果执行`xhr.abort()`, 居然还能触发一遍`abort`和`loadend`事件!!!\n    // `_finished`标识一次完整的请求是否结束, 如果已结束, 则不再触发任何事件\n    xhr._finished = FALSE\n\n    const readyStateChangeFn = () => {\n        if (xhr._finished) {\n            return\n        }\n        //console.log('xhr.readyState', xhr.readyState, 'xhr.status', xhr.status, xhr)\n        if (xhr.readyState === 4) {\n            // 如果请求被取消(aborted) 则`xhr.status`会是0 所以不会进入`success`回调\n            if ((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304) {\n                //let mime = xhr.getResponseHeader('Content-Type')\n                let data = xhr.responseText\n                switch (options.accept) {\n                    case JS0N:\n                        try {\n                            data = JSON.parse(data)\n                        } catch (e) {\n                            console.warn('The response can NOT be parsed to JSON object.', data)\n                        }\n                        break\n                    case SCRIPT:\n                        (1, eval)(data)\n                        break\n                    case XML:\n                        data = xhr.responseXML\n                        break\n                    //case HTML:\n                    //case TEXT:\n                    default:\n                        break\n                }\n                options.success(data, xhr)\n            } else {\n                // 因为取消时会先触发原生的`onreadystatechange`响应，后触发`onAbort`回调，所以\n                // 如果请求被取消(aborted) 则`xhr.status`会是0 程序走到这里的时候，`xhr._aborted`状态是false，\n                // 需要排除，不应该触发`error`回调\n                !xhr._aborted && options.error(xhr.status, xhr)\n            }\n        }\n    }\n\n\n    // readyState value:\n    //   0: UNSET 未初始化\n    //   1: OPENED\n    //   2: HEADERS_RECEIVED\n    //   3: LOADING\n    //   4: DONE 此时触发load事件\n    xhr.addEventListener(\"readystatechange\", readyStateChangeFn)\n\n    const abortFn = () => {\n        if (xhr._finished) {\n            return\n        }\n        options.abort(xhr.status, xhr)\n    }\n\n    xhr.addEventListener('abort', abortFn)\n\n    const loadedFn = () => {\n        if (xhr._finished) {\n            return\n        }\n        xhr._finished = true\n        options.complete(xhr.status, xhr)\n        delete xhr._aborted\n    }\n\n    xhr.addEventListener('loadend', loadedFn)\n}\n\nconst defaultOptions = {\n    url: '',\n    mark: {},\n    useMark: TRUE,\n    method: GET,\n    accept: '*',\n    data: NULL,\n    header: {},\n    withCredentials: NULL, // 根据`url`是否跨域决定默认值. 如果显式配置该值(必须是布尔值), 则个使用配置值\n    urlStamp: TRUE,\n    success: noop,\n    error: noop,\n    complete: noop,\n    abort: noop,\n    log: FALSE,\n    traditional: FALSE,\n}\n\nexport default function ajax(options) {\n\n    options = extend({}, defaultOptions, options)\n\n    // 是否跨域\n    let isCD = isCrossDomain(options.url)\n\n    let xhr = new XMLHttpRequest()\n\n    setEvents(xhr, options)\n\n    xhr.open(options.method, appendQueryString(\n        options.url,\n        extend({}, options.useMark ? options.mark : {}, options.method === GET ? options.data : {}),\n        options.urlStamp,\n        options.traditional\n    ))\n\n    // NOTE 生产环境的Server端, `Access-Control-Allow-Origin`的值一定不要配置成`*`!!! 而且`Access-Control-Allow-Credentials`应该是true!!!\n    // NOTE 如果Server端的`responseHeader`配置了`Access-Control-Allow-Origin`的值是通配符`*` 则前端`withCredentials`是不能使用true值的\n    // NOTE 如果Client端`withCredentials`使用了true值 则后端`responseHeader`中必须配置`Access-Control-Allow-Credentials`是true\n    xhr.withCredentials = isBoolean(options.withCredentials) ? options.withCredentials : isCD\n\n    // 设置requestHeader\n    const header = setHeaders(xhr, options)\n\n    let data\n\n    if (header['Content-Type'] && ~header['Content-Type'].indexOf('application/x-www-form-urlencoded')) {\n        data = param(options.data, options.traditional)\n    } else {\n        data = JSON.stringify(options.data)\n    }\n\n    // 文档建议说 send方法如果不发送请求体数据 则null参数在某些浏览器上是必须的\n    xhr.send(options.method === GET ? NULL : data === NULL ? NULL : data)\n\n    let originAbort = xhr.abort\n\n    // 重写`abort`方法\n    xhr.abort = () => {\n        xhr._aborted = true\n        // NOTE 直接调用`originAbort()`时 浏览器会报 `Illegal invocation` 错误\n        originAbort.call(xhr)\n    }\n\n    return xhr\n}\n\n// 移动端不需要fallback\najax.fallback = false\najax.supportCORS = supportCORS","import {appendQueryString, noop, extend, makeRandom, hasWindow, NULL, TRUE, FALSE} from './util'\nconst win = hasWindow ? window : NULL\nconst doc = hasWindow ? document : NULL\nconst SCRIPT = 'script'\n\nconst removeScript = (script) => {\n    script.onerror = NULL\n    script.parentNode.removeChild(script)\n    script = NULL\n}\nlet head = NULL\nconst insertScript = (url, options) => {\n    let script = doc.createElement(SCRIPT)\n    script.src = url\n    script.async = true\n\n    if (options.crossOrigin) {\n      script.crossOrigin = true\n    }\n\n    script.onerror = (e) => {\n        win[options.callbackName] = NULL\n        options.error(e)\n        options.complete()\n    }\n\n    head = head || doc.getElementsByTagName('head')[0]\n    head.insertBefore(script, head.firstChild)\n    return script\n}\n\nconst defaultOptions = {\n    url: '',\n    mark: {},\n    useMark: TRUE,\n    data: {},\n    urlStamp: TRUE,\n    success: noop,\n    error: noop,\n    complete: noop,\n    log: FALSE,\n    flag: 'callback',\n    callbackName: 'jsonp{id}',\n    traditional: FALSE,\n    crossOrigin: FALSE\n}\n\nexport default function jsonp(options) {\n\n    options = extend({}, defaultOptions, options)\n\n    const callbackName = options.callbackName = options.callbackName.replace(/\\{id\\}/, makeRandom())\n\n    const originComplete = options.complete\n\n    let script\n\n    // 二次包装的`complete`回调\n    options.complete = () => {\n        // 删除脚本\n        removeScript(script)\n        originComplete()\n    }\n\n    // 成功回调\n    win[callbackName] = (data) => {\n        // JSONP函数需要立即删除 用于`IE8`判断是否触发`onerror`\n        win[callbackName] = NULL\n        options.success(data)\n        options.complete()\n    }\n\n    // 生成`url`\n    let url = appendQueryString(\n        options.url,\n        extend({[options.flag]: callbackName}, options.useMark ? options.mark : {}, options.data),\n        options.urlStamp,\n        options.traditional\n    )\n\n    // 插入脚本\n    script = insertScript(url, options)\n    \n    return {\n        abort() {\n            // 覆盖成功回调为无数据处理版本\n            win[callbackName] = () => {\n                win[callbackName] = NULL\n            }\n            removeScript(script)\n        }\n    }\n}\n","const PREFIX = '_'\nfunction rename (type) {\n    return PREFIX + type\n}\n\nexport default {\n    on: function () {\n        const args = arguments\n        if (typeof args[0] === 'string' && typeof args[1] === 'function') {\n            const type = rename(args[0])\n            this[type]  = this[type] || []\n            this[type].push(args[1])\n        } else if (typeof args[0] === 'object') {\n            const hash = args[0]\n            for (let i in hash) {\n                this.on(i, hash[i])\n            }\n        }\n    },\n    off: function (type, fn) {\n        type = rename(type)\n        if (!fn) {\n            delete this[type]\n        } else {\n            const fns = this[type]\n            fns.splice(fns.indexOf(fn), 1)\n            if (!this[type].length) {\n                delete this[type]\n            }\n        }\n    },\n    // @param {array} args\n    fire: function (type, args, context) {\n        const fns = this[rename(type)]\n        if (!fns) return 'NO_EVENT'\n        for (let i=0, fn; fn = fns[i]; i++) {\n            fn.apply(context || this, [].concat(args))\n        }\n    },\n    hasEvent: function (type) {\n        return !!this[rename(type)]\n    }\n}","import {extend, NULL, TRUE, FALSE, isAbsoluteUrl, isRelativeUrl, EMPTY} from './util'\nimport ajax from './__AJAX__'\nimport jsonp from './__JSONP__'\n\nlet rid = 0\nconst getRid = function () {\n    return rid++\n}\n\nexport default class Request {\n\n    constructor(apiInstance) {\n\n        const {_path, config, api, contextId} = apiInstance\n\n        this._apiInstance = apiInstance\n\n        // 单次请求实例的id，用于从`api`实例的`_pendingList`中删除请求实例\n        this._rid = [contextId, _path, getRid()].join('-')\n\n        this._path = _path\n        this.config = config\n        this.storage = api.storage\n        this.contextId = contextId\n\n        // 工作状态\n        this.pending = FALSE\n        this._requester = NULL\n    }\n\n    // 发起网络请求 返回一个Promise实例\n    send({vars, onSuccess, onError, onComplete}) {\n\n        this.vars = vars\n\n        this.onSuccess = onSuccess\n        this.onError = onError\n        this.onComplete = onComplete\n\n        const {config} = this\n\n        // 调用 willFetch 钩子\n        config.willFetch(vars, config, 'remote')\n\n        // 等待状态在此处开启 在相应的`requester`的`complete`回调中关闭\n        this.pending = TRUE\n\n        // 创建请求实例requester\n        if (config.customRequest) {\n            // 使用私有的request方法\n            this._requester = config.customRequest(vars, config, (isSuccess, response) => {\n              // 当isSuccess为false时，response的结构应该是 {message: 'xxx'}\n              isSuccess ? this.processResponse(response) : this.onError(response)\n            })\n        } else if (config.jsonp) {\n            this._requester = this.jsonp()\n        } else {\n            this._requester = this.ajax()\n        }\n\n        // 超时处理\n        if (0 !== config.timeout) {\n            setTimeout(() => {\n                if (this.pending) {\n                    // 取消请求\n                    this.abort()\n\n                    const error = {\n                        timeout: TRUE,\n                        message: 'Timeout By ' + config.timeout + 'ms.'\n                    }\n\n                    this.onError(error)\n                }\n            }, config.timeout)\n        }\n    }\n\n    // 处理结构化的响应数据\n    processResponse(response) {\n        const {config, vars} = this\n        // 调用 didFetch 钩子函数\n        config.didFetch(vars, config)\n\n        // 非标准格式数据的预处理\n        response = config.fit(response, vars)\n\n        if (response.success) {\n            // 数据处理\n            const content = config.process(response.content, vars)\n            this.onSuccess(content)\n        } else {\n            const error = extend({\n                message: '`success` is false, ' + this._path\n            }, response.error)\n            // NOTE response是只读的对象!!!\n            this.onError(error)\n        }\n    }\n\n    // 获取正式接口的完整`url`\n    // @param config {Object}\n    getFinalUrl() {\n        const {config, vars} = this\n        let url = config.mock ? config.mockUrl : config.url\n        if (!url) return EMPTY\n        const prefixKey = config.mock ? 'mockUrlPrefix' : 'urlPrefix'\n        const suffixKey = config.mock ? 'mockUrlSuffix' : 'urlSuffix'\n        const prefix = config[prefixKey] && !isAbsoluteUrl(url) && !isRelativeUrl(url) ? config[prefixKey] : EMPTY\n        const suffix = config[suffixKey] ? config[suffixKey]: EMPTY\n\n        url = prefix + url + suffix\n\n        // 如果是RESTFul API，填充所有的':x'参数\n        if (config.rest) {\n            const restData = vars.data\n            for (let param in restData) {\n                if (~param.indexOf(':')) {\n                    url = url.replace(new RegExp('\\\\/' + param), '/' + restData[param])\n                    delete restData[param]\n                }\n            }\n        }\n\n        return url\n    }\n\n    // 发起Ajax请求\n    // @returns {Object} xhr对象实例\n    ajax() {\n        const {config, vars} = this\n\n        const url = this.getFinalUrl()\n\n        return ajax({\n            traditional: config.traditional,\n            urlStamp: config.urlStamp,\n            mark: vars.mark,\n            useMark: config.mark,\n            log: config.log,\n            url: url,\n            method: config.method,\n            data: vars.data,\n            header: config.header,\n            withCredentials: config.withCredentials,\n            // 强制约定json\n            accept: 'json',\n            success: response => {\n                this.processResponse(response)\n            },\n            error: status => {\n                // 如果跨域使用了自定义的header，且服务端没有配置允许对应的header，此处status为0，目前无法处理。\n                const error = {\n                    status,\n                    message: `Error(status ${status}) in request for ${vars.mark._api}(${url})`\n                }\n                this.onError(error)\n            },\n            complete: () => {\n                this.onComplete()\n                this.pending = FALSE\n                this._requester = NULL\n            }\n        })\n    }\n\n    // 发起jsonp请求\n    // @returns {Object} 带有abort方法的对象\n    jsonp() {\n        const {config, vars} = this\n\n        const url = this.getFinalUrl()\n\n        return jsonp({\n            traditional: config.traditional,\n            log: config.log,\n            mark: vars.mark,\n            useMark: config.mark,\n            url: url,\n            data: vars.data,\n            urlStamp: config.urlStamp,\n            flag: config.jsonpFlag,\n            callbackName: config.jsonpCallbackName,\n            crossOrigin: config.jsonpCrossOrigin,\n            success: response => {\n                this.processResponse(response)\n            },\n            error: () => {\n                const error = {\n                    message: `Not accessable JSONP in request for ${vars.mark._api}(${url})`\n                }\n                this.onError(error)\n            },\n            complete: () => {\n                this.onComplete()\n                this.pending = FALSE\n                this._requester = NULL\n            }\n        })\n    }\n\n    // 取消请求\n    abort() {\n        if (this._requester) {\n            this._requester.abort()\n        }\n    }\n}","export default class Defer {\n  constructor(Promise) {\n    const t = this\n    t.promise = new Promise(function (resolve, reject) {\n      t._resolve = resolve\n      t._reject = reject\n    })\n  }\n\n  resolve(value) {\n    this._resolve.call(this.promise, value)\n  }\n\n  reject(reason) {\n    this._reject.call(this.promise, reason)\n  }\n}","import {isNumber, noop, TRUE, FALSE, NULL} from './util'\n\n/**\n * 创建轮询支持\n * @param api {Function} 需要轮询的函数\n */\nexport default function() {\n    const {api} = this\n\n    api.loop = (options, resolveFn = noop, rejectFn = noop) => {\n        if (!options.duration || !isNumber(options.duration)) {\n            throw new Error('Illegal `duration` value for `startLoop` method.')\n        }\n\n        let loopTimer = NULL\n\n        let stop = () => {\n            clearTimeout(loopTimer)\n            loopTimer = NULL\n            stop.looping = FALSE\n        }\n\n        let sleepAndRequest = () => {\n            stop.looping = TRUE\n            api(options.data).then(resolveFn, rejectFn)\n            loopTimer = setTimeout(() => {\n                sleepAndRequest()\n            }, options.duration)\n        }\n\n        sleepAndRequest()\n        \n        return stop\n    }\n}\n","import {noop, isEmptyObject, sortPlainObjectKey, FALSE, TRUE, hasConsole} from './util'\n\nexport default function() {\n    const {api} = this\n    api.soon = (data, successFn = noop, errorFn = noop) => {\n        const vars = this.makeVars(data)\n\n        // 先尝试用`storage`数据快速响应\n        if (api.storageUseable) {\n\n            const result = api.storage.has(vars.queryString)\n\n            if (result.has) {\n                successFn({\n                    fromStorage: TRUE,\n                    content: result.value\n                })\n            }\n        }\n\n        // 再发起网络请求(内部会更新`storage`)\n        this.send(vars).then(content => {\n            successFn({\n                fromStorage: FALSE,\n                content\n            })\n        }, error => {\n            errorFn(error)\n        })['catch'](function (e) {\n            hasConsole && console.error(e)\n        })\n    }\n}","import {noop, NULL, TRUE, FALSE, EMPTY, hasWindow} from './util'\n\nconst config = {\n\n    // 默认参数\n    data: {},\n\n    // 请求完成钩子函数\n    didFetch: noop,\n\n    // 预处理回调\n    fit: noop,\n\n    // 自定义header, 只针对非跨域的ajax有效, 跨域时将忽略自定义header\n    header: {},\n\n    // 是否忽律接口自身的并发请求\n    ignoreSelfConcurrent: FALSE,\n\n    // 有两种格式配置`jsonp`的值\n    // {Boolean}\n    // {Array} eg: [TRUE, 'cb', 'j{id}']\n    jsonp: FALSE,\n\n    // 是否在`jsonp`的`script`的标签上加`crossorigin`属性\n    jsonpCrossOrigin: FALSE,\n\n    // 是否开启log信息\n    log: FALSE,\n\n    // 非GET方式对JSONP无效\n    method: 'GET',\n\n    // 是否开启mock模式\n    mock: FALSE,\n\n    mockUrl: EMPTY,\n\n    // 全局`mockUrl`前缀\n    mockUrlPrefix: EMPTY,\n\n    // 全局`mockUrl`后缀\n    mockUrlSuffix: EMPTY,\n\n    // 成功回调\n    process: noop,\n\n    // 私有Promise对象, 如果不想用浏览器原生的Promise对象的话\n    Promise: hasWindow ? window.Promise : NULL,\n\n    // 是否是rest风格\n    rest: FALSE,\n\n    // 默认不执行重试\n    retry: 0,\n\n    // 使用已有的request方法\n    customRequest: NULL,\n\n    // 0表示不启动超时处理\n    timeout: 0,\n\n    // http://zeptojs.com/#$.param\n    traditional: FALSE,\n\n    url: EMPTY,\n\n    // 全局`url`前缀\n    urlPrefix: EMPTY,\n\n    // 是否在`url`上添加时间戳, 用于避免浏览器的304缓存\n    urlStamp: TRUE,\n\n    // 全局`url`后缀\n    urlSuffix: EMPTY,\n\n    // TODO 文档中没有暴露\n    withCredentials: NULL,\n\n    // 请求之前调用的钩子函数\n    willFetch: noop,\n\n    // 扩展: storage\n    storage: FALSE,\n\n    // 插件，已内置两种\n    // plugins: [\n    //     nattyFetch.plugin.loop\n    //     nattyFetch.plugin.soon\n    // ]\n    plugins: FALSE,\n}\n\nexport default config","import nattyStorage from 'natty-storage'\nimport * as util from './util'\n\nconst {\n    extend, runAsFn, isBoolean,\n    isArray, isFunction, sortPlainObjectKey, isEmptyObject,\n    isPlainObject, dummyPromise,\n    isString, NULL, TRUE, FALSE, hasConsole\n} = util\n\nimport Request from './request'\nimport ajax from './__AJAX__'\nimport Defer from './defer'\nimport event from './event'\n\n// 内置插件\nimport pluginLoop from './plugin.loop'\nimport pluginSoon from './plugin.soon'\n\n// 全局默认配置\nimport defaultGlobalConfig from './default-global-config'\n\n// 随`setGlobal`方法而变化的运行时全局配置\nlet runtimeGlobalConfig = extend({}, defaultGlobalConfig)\n\nclass API {\n    constructor(path, options, contextConfig, contextId) {\n        this._path = path\n\n        this.contextConfig = contextConfig\n\n        this.contextId = contextId\n\n        // 进行中的请求列队\n        this._pendingList = []\n\n        this.storage = NULL\n\n        const config = this.config = this.processAPIOptions(options)\n\n        // `api`的实现\n        // @param data {Object|Function}\n        // @returns {Object} Promise Object\n        this.api = (data) => {\n\n            // 处理列队中的请求\n            if (this._pendingList.length) {\n                // 是否忽略自身的并发请求\n                if (config.ignoreSelfConcurrent) {\n                    return dummyPromise\n                }\n                // 是否取消上一个请求\n                if (config.overrideSelfConcurrent) {\n                    this._pendingList[0].abort()\n                }\n            }\n\n            const vars = this.makeVars(data)\n\n            if (this.api.storageUseable) {\n                const result = this.api.storage.has(vars.queryString)\n                if (result.has) {\n                    return new config.Promise(resolve => {\n                        resolve(result.value)\n                    })\n                } else {\n                    return config.retry === 0 ? this.send(vars) : this.sendWithRetry(vars)\n                }\n            } else {\n                return config.retry === 0 ? this.send(vars) : this.sendWithRetry(vars)\n            }\n        }\n\n        this.api.config = config\n\n        this.api.hasPending = () => {\n            return !!this._pendingList.length\n        }\n\n        // 要删除的方法，这个地方是`v2.3.0`版本之前都存在的设计错误，因为：\n        // io.get().then(...) 发送第一次\n        // io.get().then(...) 发送第二次\n        // io.get.abort()     取消哪一次? 并发情况复杂的业务，结果不明确。\n        this.api.abort = () => {\n            hasConsole && console.warn('`abort` method will be deleted later!')\n            for (let i=0, l=this._pendingList.length; i<l; i++) {\n                this._pendingList[i].abort()\n            }\n        }\n\n        this.initStorage()\n\n        // 启动插件\n        let plugins = isArray(config.plugins) ? config.plugins : []\n\n        for (let i=0, l=plugins.length; i<l; i++) {\n            isFunction(plugins[i]) && plugins[i].call(this, this)\n        }\n    }\n\n    // @param {Object} 一次独立的请求数据\n    makeVars(data) {\n        const {config} = this\n        // 每次请求私有的相关数据\n        const vars = {\n            // `url`中的标记\n            mark: {\n                _api: this._path,\n                _mock: config.mock\n            }\n        }\n\n        // `data`必须在请求发生时实时创建\n        // 另外，将数据参数存在私有标记中, 方便API的`process`方法内部使用\n        data = extend({}, runAsFn(config.data), runAsFn(data))\n\n        // 承载请求参数数据\n        vars.data = data\n\n        // 根据`data`创建`storage`查询用的`key`\n        if (this.api.storageUseable) {\n            vars.queryString = isEmptyObject(data) ? 'no-query-string' : JSON.stringify(sortPlainObjectKey(data))\n        }\n\n        return vars\n    }\n\n    // 发送真正的网络请求\n    send(vars) {\n        const {config} = this\n\n        // 每次请求都创建一个请求实例\n        const request = new Request(this)\n\n        this._pendingList.push(request)\n\n        const defer = new Defer(config.Promise)\n\n        request.send({\n            vars,\n            onSuccess: content => {\n                if (this.api.storageUseable) {\n                    this.api.storage.set(vars.queryString, content)\n                }\n                defer.resolve(content)\n                event.fire('g.resolve', [content, config], config)\n                event.fire(this.contextId + '.resolve', [content, config], config)\n            },\n            onError: error => {\n                defer.reject(error)\n                event.fire('g.reject', [error, config, vars], config)\n                event.fire(this.contextId + '.reject', [error, config, vars], config)\n            },\n            onComplete: () => {\n                let indexToRemove\n                for (let i=0, l=this._pendingList.length; i<l; i++) {\n                    if (this._pendingList[i] === request) {\n                        indexToRemove = i\n                        break\n                    }\n                }\n                indexToRemove !== undefined && this._pendingList.splice(indexToRemove, 1)\n            }\n        })\n\n        return defer.promise\n    }\n\n    sendWithRetry(vars) {\n        const {config} = this\n\n        return new config.Promise((resolve, reject) => {\n\n            let retryTime = 0\n            const sendOneTime = () => {\n                // 更新的重试次数\n                vars.mark._retryTime = retryTime\n                this.send(vars).then(content => {\n                    resolve(content)\n                }, error => {\n                    if (retryTime === config.retry) {\n                        reject(error)\n                    } else {\n                        retryTime++\n                        sendOneTime()\n                    }\n                })\n            }\n            sendOneTime()\n        })\n    }\n\n    // 处理API的配置\n    // @param options {Object}\n    processAPIOptions(options) {\n\n        // 插件是不能覆盖的, 应该追加\n        const plugins = [].concat(this.contextConfig.plugins || [], options.plugins || [])\n\n        const config = extend({}, this.contextConfig, options, {\n            plugins\n        })\n\n        // 按照[boolean, callbackKeyWord, callbackFunctionName]格式处理\n        if (isArray(options.jsonp)) {\n            config.jsonp = isBoolean(options.jsonp[0]) ? options.jsonp[0] : FALSE\n            // 这个参数只用于jsonp\n            if (config.jsonp) {\n                config.jsonpFlag = options.jsonp[1]\n                config.jsonpCallbackName = options.jsonp[2]\n            }\n        }\n\n        // 配置自动增强 如果`url`的值有`.jsonp`结尾 则认为是`jsonp`请求\n        // NOTE jsonp是描述正式接口的 不影响mock接口!!!\n        if (!config.mock && !!config.url.match(/\\.jsonp(\\?.*)?$/)) {\n            config.jsonp = TRUE\n        }\n\n        return config\n    }\n\n    // 初始化缓存对象\n    initStorage() {\n        const {config} = this\n\n        // 简易开启缓存的写法\n        if (config.storage === TRUE) {\n            config.storage = {\n                type: 'variable'\n            }\n        }\n\n        // 综合判断缓存是不是可以启用\n        this.api.storageUseable = isPlainObject(config.storage)\n            && (config.method === 'GET' || config.jsonp)\n            && (\n                nattyStorage.supportStorage\n                && (\n                    ['localStorage', 'sessionStorage'].indexOf(config.storage.type) > -1\n                    || config.storage.type === 'variable'\n                )\n            )\n\n        // 创建缓存实例\n        if (this.api.storageUseable) {\n            // 当使用`localStorage`时, 强制指定`key`值。如果没指定, 抛错!\n            // 当使用`variable`或`sessionStorage`时, 如果没指定`key`, 则自动生成内部`key`\n            // !!!为什么在使用`localStorage`时必须指定`key`值???\n            // !!!因为当key发生变化时, `localStorage`很容易产生死数据, 必须强制开发者有意识的去维护`key`值\n            if (config.storage.type === 'localStorage') {\n                if (!config.storage.hasOwnProperty('key') || !config.storage.key) {\n                    throw new Error('`key` is required when `storage.type` is `localStorage`.')\n                }\n            } else {\n                config.storage.key = config.storage.key || [this.contextId, this._path].join('_')\n            }\n\n            // `key`和`tag`的选择原则:\n            // `key`只选用相对稳定的值, 减少因为`key`的改变而增加的残留缓存\n            // 经常变化的值用于`tag`, 如一个接口在开发过程中可能使用方式不一样, 会在`jsonp`和`get`之间切换。\n            this.api.storage = nattyStorage(extend({}, config.storage, {\n                tag: [\n                    config.storage.tag,\n                    config.jsonp ? 'jsonp' : config.method,\n                    config.url\n                ].join('_') // 使用者的`tag`和内部的`tag`, 要同时生效\n            }))\n        }\n    }\n}\n\nconst context = (function () {\n    let count = 0\n\n    return function(contextId, options) {\n\n        if (isString(contextId)) {\n            options = options || {}\n        } else {\n            options = contextId || {}\n            contextId = 'c' + count++\n        }\n\n        const storage = nattyStorage({\n            type: 'variable',\n            key: contextId\n        })\n\n        const ctx = {}\n\n        ctx.api = storage.get()\n\n        ctx._contextId = contextId\n\n        // 插件是不能覆盖的, 应该追加\n        let plugins = [].concat(runtimeGlobalConfig.plugins || [], options.plugins || [])\n\n        ctx._config = extend({}, runtimeGlobalConfig, options, {\n            plugins\n        })\n\n        // 创建api\n        // @param namespace {String} optional\n        // @param APIs {Object} 该`namespace`下的`api`配置\n        ctx.create = function(namespace, APIs) {\n            let hasNamespace = arguments.length === 2 && isString(namespace)\n\n            if (!hasNamespace) {\n                APIs = namespace\n            }\n\n            for (let path in APIs) {\n                storage.set(\n                    hasNamespace ? namespace + '.' + path : path,\n                    new API(\n                        hasNamespace ? namespace + '.' + path : path,\n                        runAsFn(APIs[path]),\n                        ctx._config,\n                        contextId\n                    ).api\n                )\n            }\n\n            ctx.api = storage.get()\n        }\n\n        // 绑定上下文事件\n        ctx.on = function(name, fn) {\n            if (!isFunction(fn)) return\n            event.on(ctx._contextId + '.' + name, fn)\n            return ctx\n        }\n\n        return ctx\n    }\n})()\n\nconst nattyFetch = {}\n\n// 简易接口\n// @param options\nnattyFetch.create = function (options) {\n    return new API('nattyFetch', runAsFn(options), defaultGlobalConfig, 'global').api\n}\n\nextend(nattyFetch, {\n    onlyForModern: !__FALLBACK__,\n    version: '__VERSION__',\n    _util: util,\n    _event: event,\n    _ajax: ajax,\n    context,\n\n    // 执行全局配置\n    // @param options\n    setGlobal(options) {\n        runtimeGlobalConfig = extend({}, defaultGlobalConfig, options)\n        return this\n    },\n\n    // 获取全局配置\n    // @param property {String} optional\n    // @returns {*}\n    getGlobal(property) {\n        return property ? runtimeGlobalConfig[property] : runtimeGlobalConfig\n    },\n\n    // 绑定全局事件\n    on(name, fn) {\n        if (!isFunction(fn)) return\n        event.on('g.' + name, fn)\n        return this\n    },\n\n    // 插件名称空间\n    plugin: {\n        loop: pluginLoop,\n        soon: pluginSoon\n    }\n})\n\n// 内部直接将运行时的全局配置初始化到默认值\nnattyFetch.setGlobal(defaultGlobalConfig)\n\nexport default nattyFetch"],"names":["noop","v","redo","fn","args","arguments","ret","i","l","length","makeRandom","floor","random","isAbsoluteUrl","url","match","absoluteUrlReg","isRelativeUrl","relativeUrlReg","isBoolean","BOOLEAN","isString","STRING","isFunction","FUNCTION","runAsFn","isNumber","isNaN","NUMBER","isObject","OBJECT","NULL","isWindow","window","isPlainObject","Object","getPrototypeOf","prototype","isEmptyObject","let","count","hasOwnProperty","isArray","toString","call","ARRAY_TYPE","isCrossDomain","requestA","doc","createElement","href","originA","hostname","port","protocol","_extend","receiver","supplier","deepCopy","FALSE","key","undefined","TRUE","concat","extend","likeArray","each","sortPlainObjectKey","obj","clone","keyArray","push","sort","serialize","params","traditional","scope","type","array","hash","value","OBJECT_TYPE","add","name","param","escape","join","replace","decodeParam","str","decodeURIComponent","appendQueryString","urlStamp","Date","queryString","indexOf","ajax","options","defaultOptions","isCD","xhr","XMLHttpRequest","setEvents","open","method","useMark","mark","GET","data","withCredentials","const","header","setHeaders","JSON","stringify","send","originAbort","abort","_aborted","jsonp","script","callbackName","originComplete","complete","removeScript","win","success","flag","insertScript","rename","PREFIX","hasWindow","hasConsole","console","document","encodeURIComponent","UNDEFINED","EMPTY","dummyPromise","dummy","then","isIE","ActiveXObject","Math","location","supportCORS","SCRIPT","XML","JS0N","acceptToRequestHeader","*","json","xml","html","text","Accept","accept","setRequestHeader","_finished","readyStateChangeFn","readyState","status","responseText","parse","e","warn","eval","responseXML","error","addEventListener","abortFn","loadedFn","log","fallback","onerror","parentNode","removeChild","head","src","async","crossOrigin","getElementsByTagName","insertBefore","firstChild","rid","getRid","Request","apiInstance","_path","config","api","contextId","this","_apiInstance","_rid","storage","pending","_requester","ref","vars","onSuccess","onError","onComplete","willFetch","customRequest","isSuccess","response","processResponse","timeout","setTimeout","this$1","message","didFetch","fit","content","process","getFinalUrl","mock","mockUrl","prefixKey","suffixKey","prefix","suffix","rest","restData","RegExp","jsonpFlag","jsonpCallbackName","jsonpCrossOrigin","Defer","Promise","t","promise","resolve","reject","_resolve","_reject","reason","on","off","fns","splice","fire","context","apply","hasEvent","loop","resolveFn","rejectFn","duration","Error","loopTimer","stop","clearTimeout","looping","sleepAndRequest","soon","successFn","errorFn","makeVars","storageUseable","result","has","fromStorage","ignoreSelfConcurrent","mockUrlPrefix","mockUrlSuffix","retry","urlPrefix","urlSuffix","plugins","runtimeGlobalConfig","defaultGlobalConfig","API","path","contextConfig","_pendingList","processAPIOptions","overrideSelfConcurrent","sendWithRetry","hasPending","initStorage","_api","_mock","request","defer","set","event","indexToRemove","retryTime","sendOneTime","_retryTime","nattyStorage","supportStorage","tag","ctx","get","_contextId","_config","create","namespace","APIs","hasNamespace","nattyFetch","onlyForModern","version","_util","util","_event","_ajax","setGlobal","getGlobal","property","plugin","pluginLoop","pluginSoon"],"mappings":"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"}